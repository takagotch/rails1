<%
  cards ||= []
  link_to ||= 'page'  # other options is 'connect'
%>
<%

  tag_cloud = {}
  category_list = %w[1 2 3 4 5]
  droplets = []
  return if cards.empty?
  
  # this does scaling by rank(X), where X is what we ordered by in wql.
  # if we wanted proportionate to X, we'd need to get X returned as part of
  # the cards, which has implications for wql; namely we'd need to be able to
  # return additional fields.
  cards.reverse.each_with_index do |tag, index|
    tag_cloud[tag] = index
  end
  
  max, min = 0, 0
  tag_cloud.each_value do |count|
    max = count if count > max
    min = count if count < min
  end
  
  divisor = ((max - min) / category_list.size) + 1
  
  droplets = cards.sort_by {|c| c.name.downcase } .map do |card|
    category = category_list[(tag_cloud[card] - min) / divisor]
    options = { :class=>"cloud-#{category}" }
    WagnHelper::Droplet.new(card.name, options)
  end
%>

<div class="cloud">
  <% for droplet in droplets %>
    <%= flexlink link_to, droplet.name,  droplet.link_options %>
  <% end %>
</div>

