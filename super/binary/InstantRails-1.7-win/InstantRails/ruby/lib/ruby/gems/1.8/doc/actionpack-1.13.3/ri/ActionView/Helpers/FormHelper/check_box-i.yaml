--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Returns a checkbox tag tailored for accessing a specified attribute (identified by <tt>method</tt>) on an object assigned to the template (identified by <tt>object</tt>). It's intended that <tt>method</tt> returns an integer and if that integer is above zero, then the checkbox is checked. Additional options on the input tag can be passed as a hash with <tt>options</tt>. The <tt>checked_value</tt> defaults to 1 while the default <tt>unchecked_value</tt> is set to 0 which is convenient for boolean values. Usually unchecked checkboxes don't post anything. We work around this problem by adding a hidden value with the same name as the checkbox.
- !ruby/struct:SM::Flow::P 
  body: "Example (call, result). Imagine that @post.validated? returns 1:"
- !ruby/struct:SM::Flow::VERB 
  body: "  check_box(&quot;post&quot;, &quot;validated&quot;)\n    &lt;input type=&quot;checkbox&quot; id=&quot;post_validate&quot; name=&quot;post[validated]&quot; value=&quot;1&quot; checked=&quot;checked&quot; /&gt;\n    &lt;input name=&quot;post[validated]&quot; type=&quot;hidden&quot; value=&quot;0&quot; /&gt;\n"
- !ruby/struct:SM::Flow::P 
  body: "Example (call, result). Imagine that @puppy.gooddog returns no:"
- !ruby/struct:SM::Flow::VERB 
  body: "  check_box(&quot;puppy&quot;, &quot;gooddog&quot;, {}, &quot;yes&quot;, &quot;no&quot;)\n    &lt;input type=&quot;checkbox&quot; id=&quot;puppy_gooddog&quot; name=&quot;puppy[gooddog]&quot; value=&quot;yes&quot; /&gt;\n    &lt;input name=&quot;puppy[gooddog]&quot; type=&quot;hidden&quot; value=&quot;no&quot; /&gt;\n"
full_name: ActionView::Helpers::FormHelper#check_box
is_singleton: false
name: check_box
params: (object_name, method, options = {}, checked_value = "1", unchecked_value = "0")
visibility: public
