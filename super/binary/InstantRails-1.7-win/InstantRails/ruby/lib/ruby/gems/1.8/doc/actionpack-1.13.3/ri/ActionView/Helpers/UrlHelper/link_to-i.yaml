--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Creates a link tag of the given <tt>name</tt> using a URL created by the set of <tt>options</tt>. See the valid options in the documentation for ActionController::Base#url_for. It's also possible to pass a string instead of an options hash to get a link tag that uses the value of the string as the href for the link. If nil is passed as a name, the link itself will become the name.
- !ruby/struct:SM::Flow::P 
  body: The <tt>html_options</tt> will accept a hash of html attributes for the link tag. It also accepts 3 modifiers that specialize the link behavior.
- !ruby/object:SM::Flow::LIST 
  contents: 
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt>:confirm =&gt; 'question?'</tt>: This will add a JavaScript confirm prompt with the question specified. If the user accepts, the link is processed normally, otherwise no action is taken."
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt>:popup =&gt; true || array of window options</tt>: This will force the link to open in a popup window. By passing true, a default browser window will be opened with the URL. You can also specify an array of options that are passed-thru to JavaScripts window.open method."
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt>:method =&gt; symbol of HTTP verb</tt>: This modifier will dynamically create an HTML form and immediately submit the form for processing using the HTTP verb specified. Useful for having links perform a POST operation in dangerous actions like deleting a record (which search bots can follow while spidering your site). Supported verbs are :post, :delete and :put. Note that if the user has JavaScript disabled, the request will fall back to using GET. If you are relying on the POST behavior, your should check for it in your controllers action by using the request objects methods for post?, delete? or put?."
  type: :BULLET
- !ruby/struct:SM::Flow::P 
  body: You can mix and match the <tt>html_options</tt> with the exception of :popup and :method which will raise an ActionView::ActionViewError exception.
- !ruby/struct:SM::Flow::VERB 
  body: "  link_to &quot;Visit Other Site&quot;, &quot;http://www.rubyonrails.org/&quot;, :confirm =&gt; &quot;Are you sure?&quot;\n  link_to &quot;Help&quot;, { :action =&gt; &quot;help&quot; }, :popup =&gt; true\n  link_to &quot;View Image&quot;, { :action =&gt; &quot;view&quot; }, :popup =&gt; ['new_window_name', 'height=300,width=600']\n  link_to &quot;Delete Image&quot;, { :action =&gt; &quot;delete&quot;, :id =&gt; @image.id }, :confirm =&gt; &quot;Are you sure?&quot;, :method =&gt; :delete\n"
full_name: ActionView::Helpers::UrlHelper#link_to
is_singleton: false
name: link_to
params: (name, options = {}, html_options = nil, *parameters_for_method_reference)
visibility: public
