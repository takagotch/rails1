--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: <tt>chars</tt> is a Unicode safe proxy for string methods. It creates and returns an instance of the ActiveSupport::Multibyte::Chars class which encapsulates the original string. A Unicode safe version of all the String methods are defined on this proxy class. Undefined methods are forwarded to String, so all of the string overrides can also be called through the <tt>chars</tt> proxy.
- !ruby/struct:SM::Flow::VERB 
  body: "  name = 'Claus M\xC3\xBCller'\n  name.reverse #=&gt; &quot;rell??M sualC&quot;\n  name.length #=&gt; 13\n\n  name.chars.reverse.to_s #=&gt; &quot;rell\xC3\xBCM sualC&quot;\n  name.chars.length #=&gt; 12\n"
- !ruby/struct:SM::Flow::P 
  body: All the methods on the chars proxy which normally return a string will return a Chars object. This allows method chaining on the result of any of these methods.
- !ruby/struct:SM::Flow::VERB 
  body: "  name.chars.reverse.length #=&gt; 12\n"
- !ruby/struct:SM::Flow::P 
  body: "The Char object tries to be as interchangeable with String objects as possible: sorting and comparing between String and Char work like expected. The bang! methods change the internal string representation in the Chars object. Interoperability problems can be resolved easily with a <tt>to_s</tt> call."
- !ruby/struct:SM::Flow::P 
  body: For more information about the methods defined on the Chars proxy see ActiveSupport::Multibyte::Chars and ActiveSupport::Multibyte::Handlers::UTF8Handler
full_name: ActiveSupport::CoreExtensions::String::Unicode#chars
is_singleton: false
name: chars
params: ()
visibility: public
