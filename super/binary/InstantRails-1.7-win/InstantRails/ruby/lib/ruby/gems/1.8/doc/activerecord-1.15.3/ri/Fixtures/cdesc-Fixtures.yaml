--- !ruby/object:RI::ClassDescription 
attributes: 
- !ruby/object:RI::Attribute 
  comment: 
  name: table_name
  rw: R
class_methods: 
- !ruby/object:RI::MethodSummary 
  name: create_fixtures
- !ruby/object:RI::MethodSummary 
  name: instantiate_all_loaded_fixtures
- !ruby/object:RI::MethodSummary 
  name: instantiate_fixtures
- !ruby/object:RI::MethodSummary 
  name: new
comment: 
- !ruby/struct:SM::Flow::P 
  body: "Fixtures are a way of organizing data that you want to test against; in short, sample data. They come in 3 flavours:"
- !ruby/struct:SM::Flow::VERB 
  body: "  1.  YAML fixtures\n  2.  CSV fixtures\n  3.  Single-file fixtures\n"
- !ruby/struct:SM::Flow::H 
  level: 1
  text: YAML fixtures
- !ruby/struct:SM::Flow::P 
  body: This type of fixture is in YAML format and the preferred default. YAML is a file format which describes data structures in a non-verbose, humanly-readable format. It ships with Ruby 1.8.1+.
- !ruby/struct:SM::Flow::P 
  body: "Unlike single-file fixtures, YAML fixtures are stored in a single file per model, which are placed in the directory appointed by <tt>Test::Unit::TestCase.fixture_path=(path)</tt> (this is automatically configured for Rails, so you can just put your files in &lt;your-rails-app&gt;/test/fixtures/). The fixture file ends with the .yml file extension (Rails example: &quot;&lt;your-rails-app&gt;/test/fixtures/web_sites.yml&quot;). The format of a YAML fixture file looks like this:"
- !ruby/struct:SM::Flow::VERB 
  body: "  rubyonrails:\n    id: 1\n    name: Ruby on Rails\n    url: http://www.rubyonrails.org\n\n  google:\n    id: 2\n    name: Google\n    url: http://www.google.com\n"
- !ruby/struct:SM::Flow::P 
  body: "This YAML fixture file includes two fixtures. Each YAML fixture (ie. record) is given a name and is followed by an indented list of key/value pairs in the &quot;key: value&quot; format. Records are separated by a blank line for your viewing pleasure."
- !ruby/struct:SM::Flow::P 
  body: "Note that YAML fixtures are unordered. If you want ordered fixtures, use the omap YAML type. See http://yaml.org/type/omap.html for the specification. You will need ordered fixtures when you have foreign key constraints on keys in the same table. This is commonly needed for tree structures. Example:"
- !ruby/struct:SM::Flow::VERB 
  body: "   --- !omap\n   - parent:\n       id:         1\n       parent_id:  NULL\n       title:      Parent\n   - child:\n       id:         2\n       parent_id:  1\n       title:      Child\n"
- !ruby/struct:SM::Flow::H 
  level: 1
  text: CSV fixtures
- !ruby/struct:SM::Flow::P 
  body: "Fixtures can also be kept in the Comma Separated Value format. Akin to YAML fixtures, CSV fixtures are stored in a single file, but instead end with the .csv file extension (Rails example: &quot;&lt;your-rails-app&gt;/test/fixtures/web_sites.csv&quot;)"
- !ruby/struct:SM::Flow::P 
  body: "The format of this type of fixture file is much more compact than the others, but also a little harder to read by us humans. The first line of the CSV file is a comma-separated list of field names. The rest of the file is then comprised of the actual data (1 per line). Here's an example:"
- !ruby/struct:SM::Flow::VERB 
  body: "  id, name, url\n  1, Ruby On Rails, http://www.rubyonrails.org\n  2, Google, http://www.google.com\n"
- !ruby/struct:SM::Flow::P 
  body: Should you have a piece of data with a comma character in it, you can place double quotes around that value. If you need to use a double quote character, you must escape it with another double quote.
- !ruby/struct:SM::Flow::P 
  body: Another unique attribute of the CSV fixture is that it has <b>no</b> fixture name like the other two formats. Instead, the fixture names are automatically generated by deriving the class name of the fixture file and adding an incrementing number to the end. In our example, the 1st fixture would be called &quot;web_site_1&quot; and the 2nd one would be called &quot;web_site_2&quot;.
- !ruby/struct:SM::Flow::P 
  body: Most databases and spreadsheets support exporting to CSV format, so this is a great format for you to choose if you have existing data somewhere already.
- !ruby/struct:SM::Flow::H 
  level: 1
  text: Single-file fixtures
- !ruby/struct:SM::Flow::P 
  body: This type of fixtures was the original format for Active Record that has since been deprecated in favor of the YAML and CSV formats. Fixtures for this format are created by placing text files in a sub-directory (with the name of the model) to the directory appointed by <tt>Test::Unit::TestCase.fixture_path=(path)</tt> (this is automatically configured for Rails, so you can just put your files in &lt;your-rails-app&gt;/test/fixtures/&lt;your-model-name&gt;/ -- like &lt;your-rails-app&gt;/test/fixtures/web_sites/ for the WebSite model).
- !ruby/struct:SM::Flow::P 
  body: "Each text file placed in this directory represents a &quot;record&quot;. Usually these types of fixtures are named without extensions, but if you are on a Windows machine, you might consider adding .txt as the extension. Here's what the above example might look like:"
- !ruby/struct:SM::Flow::VERB 
  body: "  web_sites/google\n  web_sites/yahoo.txt\n  web_sites/ruby-on-rails\n"
- !ruby/struct:SM::Flow::P 
  body: "The file format of a standard fixture is simple. Each line is a property (or column in db speak) and has the syntax of &quot;name =&gt; value&quot;. Here's an example of the ruby-on-rails fixture above:"
- !ruby/struct:SM::Flow::VERB 
  body: "  id =&gt; 1\n  name =&gt; Ruby on Rails\n  url =&gt; http://www.rubyonrails.org\n"
- !ruby/struct:SM::Flow::H 
  level: 1
  text: Using Fixtures
- !ruby/struct:SM::Flow::P 
  body: "Since fixtures are a testing construct, we use them in our unit and functional tests. There are two ways to use the fixtures, but first let's take a look at a sample unit test found:"
- !ruby/struct:SM::Flow::VERB 
  body: "  require 'web_site'\n\n  class WebSiteTest &lt; Test::Unit::TestCase\n    def test_web_site_count\n      assert_equal 2, WebSite.count\n    end\n  end\n"
- !ruby/struct:SM::Flow::P 
  body: "As it stands, unless we pre-load the web_site table in our database with two records, this test will fail. Here's the easiest way to add fixtures to the database:"
- !ruby/struct:SM::Flow::VERB 
  body: "  ...\n  class WebSiteTest &lt; Test::Unit::TestCase\n    fixtures :web_sites # add more by separating the symbols with commas\n  ...\n"
- !ruby/struct:SM::Flow::P 
  body: By adding a &quot;fixtures&quot; method to the test case and passing it a list of symbols (only one is shown here tho), we trigger the testing environment to automatically load the appropriate fixtures into the database before each test. To ensure consistent data, the environment deletes the fixtures before running the load.
- !ruby/struct:SM::Flow::P 
  body: In addition to being available in the database, the fixtures are also loaded into a hash stored in an instance variable of the test case. It is named after the symbol... so, in our example, there would be a hash available called @web_sites. This is where the &quot;fixture name&quot; comes into play.
- !ruby/struct:SM::Flow::P 
  body: "On top of that, each record is automatically &quot;found&quot; (using Model.find(id)) and placed in the instance variable of its name. So for the YAML fixtures, we'd get @rubyonrails and @google, which could be interrogated using regular Active Record semantics:"
- !ruby/struct:SM::Flow::VERB 
  body: "  # test if the object created from the fixture data has the same attributes as the data itself\n  def test_find\n    assert_equal @web_sites[&quot;rubyonrails&quot;][&quot;name&quot;], @rubyonrails.name\n  end\n"
- !ruby/struct:SM::Flow::P 
  body: As seen above, the data hash created from the YAML fixtures would have @web_sites[&quot;rubyonrails&quot;][&quot;url&quot;] return &quot;http://www.rubyonrails.org&quot; and @web_sites[&quot;google&quot;][&quot;name&quot;] would return &quot;Google&quot;. The same fixtures, but loaded from a CSV fixture file, would be accessible via @web_sites[&quot;web_site_1&quot;][&quot;name&quot;] == &quot;Ruby on Rails&quot; and have the individual fixtures available as instance variables @web_site_1 and @web_site_2.
- !ruby/struct:SM::Flow::P 
  body: If you do not wish to use instantiated fixtures (usually for performance reasons) there are two options.
- !ruby/struct:SM::Flow::VERB 
  body: "  - to completely disable instantiated fixtures:\n      self.use_instantiated_fixtures = false\n\n  - to keep the fixture instance (@web_sites) available, but do not automatically 'find' each instance:\n      self.use_instantiated_fixtures = :no_instances\n"
- !ruby/struct:SM::Flow::P 
  body: "Even if auto-instantiated fixtures are disabled, you can still access them by name via special dynamic methods. Each method has the same name as the model, and accepts the name of the fixture to instantiate:"
- !ruby/struct:SM::Flow::VERB 
  body: "  fixtures :web_sites\n\n  def test_find\n    assert_equal &quot;Ruby on Rails&quot;, web_sites(:rubyonrails).name\n  end\n"
- !ruby/struct:SM::Flow::H 
  level: 1
  text: Dynamic fixtures with ERb
- !ruby/struct:SM::Flow::P 
  body: "Some times you don't care about the content of the fixtures as much as you care about the volume. In these cases, you can mix ERb in with your YAML or CSV fixtures to create a bunch of fixtures for load testing, like:"
- !ruby/struct:SM::Flow::P 
  body: "&lt;% for i in 1..1000 %&gt; fix_&lt;%= i %&gt;:"
- !ruby/struct:SM::Flow::VERB 
  body: "  id: &lt;%= i %&gt;\n  name: guy_&lt;%= 1 %&gt;\n"
- !ruby/struct:SM::Flow::P 
  body: "&lt;% end %&gt;"
- !ruby/struct:SM::Flow::P 
  body: This will create 1000 very simple YAML fixtures.
- !ruby/struct:SM::Flow::P 
  body: Using ERb, you can also inject dynamic values into your fixtures with inserts like &lt;%= Date.today.strftime(&quot;%Y-%m-%d&quot;) %&gt;. This is however a feature to be used with some caution. The point of fixtures are that they're stable units of predictable sample data. If you feel that you need to inject dynamic values, then perhaps you should reexamine whether your application is properly testable. Hence, dynamic values in fixtures are to be considered a code smell.
- !ruby/struct:SM::Flow::H 
  level: 1
  text: Transactional fixtures
- !ruby/struct:SM::Flow::P 
  body: TestCases can use begin+rollback to isolate their changes to the database instead of having to delete+insert for every test case. They can also turn off auto-instantiation of fixture data since the feature is costly and often unused.
- !ruby/struct:SM::Flow::VERB 
  body: "  class FooTest &lt; Test::Unit::TestCase\n    self.use_transactional_fixtures = true\n    self.use_instantiated_fixtures = false\n\n    fixtures :foos\n\n    def test_godzilla\n      assert !Foo.find(:all).empty?\n      Foo.destroy_all\n      assert Foo.find(:all).empty?\n    end\n\n    def test_godzilla_aftermath\n      assert !Foo.find(:all).empty?\n    end\n  end\n"
- !ruby/struct:SM::Flow::P 
  body: If you preload your test database with all fixture data (probably in the Rakefile task) and use transactional fixtures, then you may omit all fixtures declarations in your test cases since all the data's already there and every case rolls back its changes.
- !ruby/struct:SM::Flow::P 
  body: In order to use instantiated fixtures with preloaded data, set +self.pre_loaded_fixtures+ to true. This will provide access to fixture data for every table that has been loaded through fixtures (depending on the value of <tt>use_instantiated_fixtures</tt>)
- !ruby/struct:SM::Flow::P 
  body: "When <b>not</b> to use transactional fixtures:"
- !ruby/struct:SM::Flow::VERB 
  body: "  1. You're testing whether a transaction works correctly. Nested transactions don't commit until all parent transactions commit,\n     particularly, the fixtures transaction which is begun in setup and rolled back in teardown. Thus, you won't be able to verify\n     the results of your transaction until Active Record supports nested transactions or savepoints (in progress.)\n  2. Your database does not support transactions. Every Active Record database supports transactions except MySQL MyISAM.\n     Use InnoDB, MaxDB, or NDB instead.\n"
constants: 
- !ruby/object:RI::Constant 
  comment: 
  name: DEFAULT_FILTER_RE
  value: /\.ya?ml$/
full_name: Fixtures
includes: []

instance_methods: 
- !ruby/object:RI::MethodSummary 
  name: delete_existing_fixtures
- !ruby/object:RI::MethodSummary 
  name: insert_fixtures
- !ruby/object:RI::MethodSummary 
  name: insert_fixtures
name: Fixtures
superclass: Object
