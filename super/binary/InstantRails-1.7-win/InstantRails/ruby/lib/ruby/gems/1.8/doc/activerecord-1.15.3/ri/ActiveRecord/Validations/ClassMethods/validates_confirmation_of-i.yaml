--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: "Encapsulates the pattern of wanting to validate a password or email address field with a confirmation. Example:"
- !ruby/struct:SM::Flow::VERB 
  body: "  Model:\n    class Person &lt; ActiveRecord::Base\n      validates_confirmation_of :user_name, :password\n      validates_confirmation_of :email_address, :message =&gt; &quot;should match confirmation&quot;\n    end\n\n  View:\n    &lt;%= password_field &quot;person&quot;, &quot;password&quot; %&gt;\n    &lt;%= password_field &quot;person&quot;, &quot;password_confirmation&quot; %&gt;\n"
- !ruby/struct:SM::Flow::P 
  body: The person has to already have a password attribute (a column in the people table), but the password_confirmation is virtual. It exists only as an in-memory variable for validating the password. This check is performed only if password_confirmation is not nil and by default on save.
- !ruby/struct:SM::Flow::P 
  body: "Configuration options:"
- !ruby/object:SM::Flow::LIST 
  contents: 
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt>message</tt> - A custom error message (default is: &quot;doesn't match confirmation&quot;)"
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt>on</tt> - Specifies when this validation is active (default is :save, other options :create, :update)
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt>if</tt> - Specifies a method, proc or string to call to determine if the validation should
  type: :BULLET
- !ruby/struct:SM::Flow::P 
  body: occur (e.g. :if =&gt; :allow_validation, or :if =&gt; Proc.new { |user| user.signup_step &gt; 2 }). The method, proc or string should return or evaluate to a true or false value.
full_name: ActiveRecord::Validations::ClassMethods#validates_confirmation_of
is_singleton: false
name: validates_confirmation_of
params: (*attr_names)
visibility: public
