--- !ruby/object:RI::ClassDescription 
attributes: []

class_methods: 
- !ruby/object:RI::MethodSummary 
  name: announce
- !ruby/object:RI::MethodSummary 
  name: method_missing
- !ruby/object:RI::MethodSummary 
  name: migrate
- !ruby/object:RI::MethodSummary 
  name: say
- !ruby/object:RI::MethodSummary 
  name: say_with_time
- !ruby/object:RI::MethodSummary 
  name: suppress_messages
- !ruby/object:RI::MethodSummary 
  name: write
comment: 
- !ruby/struct:SM::Flow::P 
  body: Migrations can manage the evolution of a schema used by several physical databases. It's a solution to the common problem of adding a field to make a new feature work in your local database, but being unsure of how to push that change to other developers and to the production server. With migrations, you can describe the transformations in self-contained classes that can be checked into version control systems and executed against another database that might be one, two, or five versions behind.
- !ruby/struct:SM::Flow::P 
  body: "Example of a simple migration:"
- !ruby/struct:SM::Flow::VERB 
  body: "  class AddSsl &lt; ActiveRecord::Migration\n    def self.up\n      add_column :accounts, :ssl_enabled, :boolean, :default =&gt; 1\n    end\n\n    def self.down\n      remove_column :accounts, :ssl_enabled\n    end\n  end\n"
- !ruby/struct:SM::Flow::P 
  body: This migration will add a boolean flag to the accounts table and remove it again, if you're backing out of the migration. It shows how all migrations have two class methods <tt>up</tt> and <tt>down</tt> that describes the transformations required to implement or remove the migration. These methods can consist of both the migration specific methods, like add_column and remove_column, but may also contain regular Ruby code for generating data needed for the transformations.
- !ruby/struct:SM::Flow::P 
  body: "Example of a more complex migration that also needs to initialize data:"
- !ruby/struct:SM::Flow::VERB 
  body: "  class AddSystemSettings &lt; ActiveRecord::Migration\n    def self.up\n      create_table :system_settings do |t|\n        t.column :name,     :string\n        t.column :label,    :string\n        t.column :value,    :text\n        t.column :type,     :string\n        t.column :position, :integer\n      end\n\n      SystemSetting.create :name =&gt; &quot;notice&quot;, :label =&gt; &quot;Use notice?&quot;, :value =&gt; 1\n    end\n\n    def self.down\n      drop_table :system_settings\n    end\n  end\n"
- !ruby/struct:SM::Flow::P 
  body: This migration first adds the system_settings table, then creates the very first row in it using the Active Record model that relies on the table. It also uses the more advanced create_table syntax where you can specify a complete table schema in one block call.
- !ruby/struct:SM::Flow::H 
  level: 2
  text: Available transformations
- !ruby/object:SM::Flow::LIST 
  contents: 
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt>create_table(name, options)</tt> Creates a table called <tt>name</tt> and makes the table object available to a block that can then add columns to it, following the same format as add_column. See example above. The options hash is for fragments like &quot;DEFAULT CHARSET=UTF-8&quot; that are appended to the create table definition.
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt>drop_table(name)</tt>: Drops the table called <tt>name</tt>."
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt>rename_table(old_name, new_name)</tt>: Renames the table called <tt>old_name</tt> to <tt>new_name</tt>."
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt>add_column(table_name, column_name, type, options)</tt>: Adds a new column to the table called <tt>table_name</tt> named <tt>column_name</tt> specified to be one of the following types: :string, :text, :integer, :float, :decimal, :datetime, :timestamp, :time, :date, :binary, :boolean. A default value can be specified by passing an <tt>options</tt> hash like { :default =&gt; 11 }. Other options include :limit and :null (e.g. { :limit =&gt; 50, :null =&gt; false }) -- see ActiveRecord::ConnectionAdapters::TableDefinition#column for details."
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt>rename_column(table_name, column_name, new_column_name)</tt>: Renames a column but keeps the type and content."
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt>change_column(table_name, column_name, type, options)</tt>: Changes the column to a different type using the same parameters as add_column."
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt>remove_column(table_name, column_name)</tt>: Removes the column named <tt>column_name</tt> from the table called <tt>table_name</tt>."
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt>add_index(table_name, column_names, index_type, index_name)</tt>: Add a new index with the name of the column, or <tt>index_name</tt> (if specified) on the column(s). Specify an optional <tt>index_type</tt> (e.g. UNIQUE)."
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt>remove_index(table_name, index_name)</tt>: Remove the index specified by <tt>index_name</tt>."
  type: :BULLET
- !ruby/struct:SM::Flow::H 
  level: 2
  text: Irreversible transformations
- !ruby/struct:SM::Flow::P 
  body: Some transformations are destructive in a manner that cannot be reversed. Migrations of that kind should raise an <tt>IrreversibleMigration</tt> exception in their <tt>down</tt> method.
- !ruby/struct:SM::Flow::H 
  level: 2
  text: Running migrations from within Rails
- !ruby/struct:SM::Flow::P 
  body: The Rails package has several tools to help create and apply migrations.
- !ruby/struct:SM::Flow::P 
  body: To generate a new migration, use <tt>script/generate migration MyNewMigration</tt> where MyNewMigration is the name of your migration. The generator will create a file <tt>nnn_my_new_migration.rb</tt> in the <tt>db/migrate/</tt> directory, where <tt>nnn</tt> is the next largest migration number. You may then edit the <tt>self.up</tt> and <tt>self.down</tt> methods of n MyNewMigration.
- !ruby/struct:SM::Flow::P 
  body: To run migrations against the currently configured database, use <tt>rake migrate</tt>. This will update the database by running all of the pending migrations, creating the <tt>schema_info</tt> table if missing.
- !ruby/struct:SM::Flow::P 
  body: To roll the database back to a previous migration version, use <tt>rake migrate VERSION=X</tt> where <tt>X</tt> is the version to which you wish to downgrade. If any of the migrations throw an <tt>IrreversibleMigration</tt> exception, that step will fail and you'll have some manual work to do.
- !ruby/struct:SM::Flow::H 
  level: 2
  text: Database support
- !ruby/struct:SM::Flow::P 
  body: Migrations are currently supported in MySQL, PostgreSQL, SQLite, SQL Server, Sybase, and Oracle (all supported databases except DB2).
- !ruby/struct:SM::Flow::H 
  level: 2
  text: More examples
- !ruby/struct:SM::Flow::P 
  body: "Not all migrations change the schema. Some just fix the data:"
- !ruby/struct:SM::Flow::VERB 
  body: "  class RemoveEmptyTags &lt; ActiveRecord::Migration\n    def self.up\n      Tag.find(:all).each { |tag| tag.destroy if tag.pages.empty? }\n    end\n\n    def self.down\n      # not much we can do to restore deleted data\n      raise IrreversibleMigration\n    end\n  end\n"
- !ruby/struct:SM::Flow::P 
  body: "Others remove columns when they migrate up instead of down:"
- !ruby/struct:SM::Flow::VERB 
  body: "  class RemoveUnnecessaryItemAttributes &lt; ActiveRecord::Migration\n    def self.up\n      remove_column :items, :incomplete_items_count\n      remove_column :items, :completed_items_count\n    end\n\n    def self.down\n      add_column :items, :incomplete_items_count\n      add_column :items, :completed_items_count\n    end\n  end\n"
- !ruby/struct:SM::Flow::P 
  body: "And sometimes you need to do something in SQL not abstracted directly by migrations:"
- !ruby/struct:SM::Flow::VERB 
  body: "  class MakeJoinUnique &lt; ActiveRecord::Migration\n    def self.up\n      execute &quot;ALTER TABLE `pages_linked_pages` ADD UNIQUE `page_id_linked_page_id` (`page_id`,`linked_page_id`)&quot;\n    end\n\n    def self.down\n      execute &quot;ALTER TABLE `pages_linked_pages` DROP INDEX `page_id_linked_page_id`&quot;\n    end\n  end\n"
- !ruby/struct:SM::Flow::H 
  level: 2
  text: Using a model after changing its table
- !ruby/struct:SM::Flow::P 
  body: "Sometimes you'll want to add a column in a migration and populate it immediately after. In that case, you'll need to make a call to Base#reset_column_information in order to ensure that the model has the latest column data from after the new column was added. Example:"
- !ruby/struct:SM::Flow::VERB 
  body: "  class AddPeopleSalary &lt; ActiveRecord::Migration\n    def self.up\n      add_column :people, :salary, :integer\n      Person.reset_column_information\n      Person.find(:all).each do |p|\n        p.update_attribute :salary, SalaryCalculator.compute(p)\n      end\n    end\n  end\n"
- !ruby/struct:SM::Flow::H 
  level: 2
  text: Controlling verbosity
- !ruby/struct:SM::Flow::P 
  body: By default, migrations will describe the actions they are taking, writing them to the console as they happen, along with benchmarks describing how long each step took.
- !ruby/struct:SM::Flow::P 
  body: You can quiet them down by setting ActiveRecord::Migration.verbose = false.
- !ruby/struct:SM::Flow::P 
  body: "You can also insert your own messages and benchmarks by using the #say_with_time method:"
- !ruby/struct:SM::Flow::VERB 
  body: "  def self.up\n    ...\n    say_with_time &quot;Updating salaries...&quot; do\n      Person.find(:all).each do |p|\n        p.update_attribute :salary, SalaryCalculator.compute(p)\n      end\n    end\n    ...\n  end\n"
- !ruby/struct:SM::Flow::P 
  body: The phrase &quot;Updating salaries...&quot; would then be printed, along with the benchmark for the block when the block completes.
constants: []

full_name: ActiveRecord::Migration
includes: []

instance_methods: []

name: Migration
superclass: Object
