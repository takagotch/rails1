--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: "Creates a form and a scope around a specific model object, which is then used as a base for questioning about values for the fields. Examples:"
- !ruby/struct:SM::Flow::VERB 
  body: "  &lt;% form_for :person, @person, :url =&gt; { :action =&gt; &quot;update&quot; } do |f| %&gt;\n    First name: &lt;%= f.text_field :first_name %&gt;\n    Last name : &lt;%= f.text_field :last_name %&gt;\n    Biography : &lt;%= f.text_area :biography %&gt;\n    Admin?    : &lt;%= f.check_box :admin %&gt;\n  &lt;% end %&gt;\n"
- !ruby/struct:SM::Flow::P 
  body: Worth noting is that the form_for tag is called in a ERb evaluation block, not a ERb output block. So that's <tt>&lt;% %&gt;</tt>, not <tt>&lt;%= %&gt;</tt>. Also worth noting is that the form_for yields a form_builder object, in this example as f, which emulates the API for the stand-alone FormHelper methods, but without the object name. So instead of <tt>text_field :person, :name</tt>, you get away with <tt>f.text_field :name</tt>.
- !ruby/struct:SM::Flow::P 
  body: That in itself is a modest increase in comfort. The big news is that form_for allows us to more easily escape the instance variable convention, so while the stand-alone approach would require <tt>text_field :person, :name, :object =&gt; person</tt> to work with local variables instead of instance ones, the form_for calls remain the same. You simply declare once with <tt>:person, person</tt> and all subsequent field calls save <tt>:person</tt> and <tt>:object =&gt; person</tt>.
- !ruby/struct:SM::Flow::P 
  body: "Also note that form_for doesn't create an exclusive scope. It's still possible to use both the stand-alone FormHelper methods and methods from FormTagHelper. Example:"
- !ruby/struct:SM::Flow::VERB 
  body: "  &lt;% form_for :person, @person, :url =&gt; { :action =&gt; &quot;update&quot; } do |f| %&gt;\n    First name: &lt;%= f.text_field :first_name %&gt;\n    Last name : &lt;%= f.text_field :last_name %&gt;\n    Biography : &lt;%= text_area :person, :biography %&gt;\n    Admin?    : &lt;%= check_box_tag &quot;person[admin]&quot;, @person.company.admin? %&gt;\n  &lt;% end %&gt;\n"
- !ruby/struct:SM::Flow::P 
  body: "Note: This also works for the methods in FormOptionHelper and DateHelper that are designed to work with an object as base. Like collection_select and datetime_select."
- !ruby/struct:SM::Flow::P 
  body: "Html attributes for the form tag can be given as :html =&gt; {...}. Example:"
- !ruby/struct:SM::Flow::VERB 
  body: "  &lt;% form_for :person, @person, :html =&gt; {:id =&gt; 'person_form'} do |f| %&gt;\n    ...\n  &lt;% end %&gt;\n"
- !ruby/struct:SM::Flow::P 
  body: "You can also build forms using a customized FormBuilder class. Subclass FormBuilder and override or define some more helpers, then use your custom builder like so:"
- !ruby/struct:SM::Flow::VERB 
  body: "  &lt;% form_for :person, @person, :url =&gt; { :action =&gt; &quot;update&quot; }, :builder =&gt; LabellingFormBuilder do |f| %&gt;\n    &lt;%= f.text_field :first_name %&gt;\n    &lt;%= f.text_field :last_name %&gt;\n    &lt;%= text_area :person, :biography %&gt;\n    &lt;%= check_box_tag &quot;person[admin]&quot;, @person.company.admin? %&gt;\n  &lt;% end %&gt;\n"
- !ruby/struct:SM::Flow::P 
  body: "In many cases you will want to wrap the above in another helper, such as:"
- !ruby/struct:SM::Flow::VERB 
  body: "  def labelled_form_for(name, object, options, &amp;proc)\n    form_for(name, object, options.merge(:builder =&gt; LabellingFormBuiler), &amp;proc)\n  end\n"
full_name: ActionView::Helpers::FormHelper#form_for
is_singleton: false
name: form_for
params: (object_name, *args, &proc)
visibility: public
