--- !ruby/object:RI::ClassDescription 
attributes: []

class_methods: 
- !ruby/object:RI::MethodSummary 
  name: new
comment: 
- !ruby/struct:SM::Flow::P 
  body: The Firebird adapter relies on the FireRuby[http://rubyforge.org/projects/fireruby/] extension, version 0.4.0 or later (available as a gem or from RubyForge[http://rubyforge.org/projects/fireruby/]). FireRuby works with Firebird 1.5.x on Linux, OS X and Win32 platforms.
- !ruby/struct:SM::Flow::H 
  level: 2
  text: Usage Notes
- !ruby/struct:SM::Flow::H 
  level: 3
  text: Sequence (Generator) Names
- !ruby/struct:SM::Flow::P 
  body: The Firebird adapter supports the same approach adopted for the Oracle adapter. See ActiveRecord::Base#set_sequence_name for more details.
- !ruby/struct:SM::Flow::P 
  body: Note that in general there is no need to create a <tt>BEFORE INSERT</tt> trigger corresponding to a Firebird sequence generator when using ActiveRecord. In other words, you don't have to try to make Firebird simulate an <tt>AUTO_INCREMENT</tt> or <tt>IDENTITY</tt> column. When saving a new record, ActiveRecord pre-fetches the next sequence value for the table and explicitly includes it in the <tt>INSERT</tt> statement. (Pre-fetching the next primary key value is the only reliable method for the Firebird adapter to report back the <tt>id</tt> after a successful insert.)
- !ruby/struct:SM::Flow::H 
  level: 3
  text: BOOLEAN Domain
- !ruby/struct:SM::Flow::P 
  body: "Firebird 1.5 does not provide a native <tt>BOOLEAN</tt> type. But you can easily define a <tt>BOOLEAN</tt> <em>domain</em> for this purpose, e.g.:"
- !ruby/struct:SM::Flow::VERB 
  body: " CREATE DOMAIN D_BOOLEAN AS SMALLINT CHECK (VALUE IN (0, 1) OR VALUE IS NULL);\n"
- !ruby/struct:SM::Flow::P 
  body: When the Firebird adapter encounters a column that is based on a domain that includes &quot;BOOLEAN&quot; in the domain name, it will attempt to treat the column as a <tt>BOOLEAN</tt>.
- !ruby/struct:SM::Flow::P 
  body: "By default, the Firebird adapter will assume that the BOOLEAN domain is defined as above. This can be modified if needed. For example, if you have a legacy schema with the following <tt>BOOLEAN</tt> domain defined:"
- !ruby/struct:SM::Flow::VERB 
  body: " CREATE DOMAIN BOOLEAN AS CHAR(1) CHECK (VALUE IN ('T', 'F'));\n"
- !ruby/struct:SM::Flow::P 
  body: "...you can add the following line to your <tt>environment.rb</tt> file:"
- !ruby/struct:SM::Flow::VERB 
  body: " ActiveRecord::ConnectionAdapters::FirebirdAdapter.boolean_domain = { :true =&gt; 'T', :false =&gt; 'F' }\n"
- !ruby/struct:SM::Flow::H 
  level: 3
  text: BLOB Elements
- !ruby/struct:SM::Flow::P 
  body: The Firebird adapter currently provides only limited support for <tt>BLOB</tt> columns. You cannot currently retrieve or insert a <tt>BLOB</tt> as an IO stream. When selecting a <tt>BLOB</tt>, the entire element is converted into a String. When inserting or updating a <tt>BLOB</tt>, the entire value is included in-line in the SQL statement, limiting you to values &lt;= 32KB in size.
- !ruby/struct:SM::Flow::H 
  level: 3
  text: Column Name Case Semantics
- !ruby/struct:SM::Flow::P 
  body: Firebird and ActiveRecord have somewhat conflicting case semantics for column names.
- !ruby/object:SM::Flow::LIST 
  contents: 
  - !ruby/struct:SM::Flow::LI 
    label: "*Firebird*"
    body: The standard practice is to use unquoted column names, which can be thought of as case-insensitive. (In fact, Firebird converts them to uppercase.) Quoted column names (not typically used) are case-sensitive.
  - !ruby/struct:SM::Flow::LI 
    label: "*ActiveRecord*"
    body: Attribute accessors corresponding to column names are case-sensitive. The defaults for primary key and inheritance columns are lowercase, and in general, people use lowercase attribute names.
  type: :LABELED
- !ruby/struct:SM::Flow::P 
  body: In order to map between the differing semantics in a way that conforms to common usage for both Firebird and ActiveRecord, uppercase column names in Firebird are converted to lowercase attribute names in ActiveRecord, and vice-versa. Mixed-case column names retain their case in both directions. Lowercase (quoted) Firebird column names are not supported. This is similar to the solutions adopted by other adapters.
- !ruby/struct:SM::Flow::P 
  body: In general, the best approach is to use unqouted (case-insensitive) column names in your Firebird DDL (or if you must quote, use uppercase column names). These will correspond to lowercase attributes in ActiveRecord.
- !ruby/struct:SM::Flow::P 
  body: "For example, a Firebird table based on the following DDL:"
- !ruby/struct:SM::Flow::VERB 
  body: " CREATE TABLE products (\n   id BIGINT NOT NULL PRIMARY KEY,\n   &quot;TYPE&quot; VARCHAR(50),\n   name VARCHAR(255) );\n"
- !ruby/struct:SM::Flow::P 
  body: "...will correspond to an ActiveRecord model class called <tt>Product</tt> with the following attributes: <tt>id</tt>, <tt>type</tt>, <tt>name</tt>."
- !ruby/struct:SM::Flow::H 
  level: 4
  text: "Quoting <tt>&quot;TYPE&quot;</tt> and other Firebird reserved words:"
- !ruby/struct:SM::Flow::P 
  body: In ActiveRecord, the default inheritance column name is <tt>type</tt>. The word <em>type</em> is a Firebird reserved word, so it must be quoted in any Firebird SQL statements. Because of the case mapping described above, you should always reference this column using quoted-uppercase syntax (<tt>&quot;TYPE&quot;</tt>) within Firebird DDL or other SQL statements (as in the example above). This holds true for any other Firebird reserved words used as column names as well.
- !ruby/struct:SM::Flow::H 
  level: 3
  text: Migrations
- !ruby/struct:SM::Flow::P 
  body: The Firebird Adapter now supports Migrations.
- !ruby/struct:SM::Flow::H 
  level: 4
  text: Create/Drop Table and Sequence Generators
- !ruby/struct:SM::Flow::P 
  body: Creating or dropping a table will automatically create/drop a correpsonding sequence generator, using the default naming convension. You can specify a different name using the <tt>:sequence</tt> option; no generator is created if <tt>:sequence</tt> is set to <tt>false</tt>.
- !ruby/struct:SM::Flow::H 
  level: 4
  text: Rename Table
- !ruby/struct:SM::Flow::P 
  body: "The Firebird #rename_table Migration should be used with caution. Firebird 1.5 lacks built-in support for this feature, so it is implemented by making a copy of the original table (including column definitions, indexes and data records), and then dropping the original table. Constraints and Triggers are <em>not</em> properly copied, so avoid this method if your original table includes constraints (other than the primary key) or triggers. (Consider manually copying your table or using a view instead.)"
- !ruby/struct:SM::Flow::H 
  level: 2
  text: Connection Options
- !ruby/struct:SM::Flow::P 
  body: The following options are supported by the Firebird adapter. None of the options have default values.
- !ruby/object:SM::Flow::LIST 
  contents: 
  - !ruby/struct:SM::Flow::LI 
    label: "<tt>:database</tt>:"
    body: "<em>Required option.</em> Specifies one of: (i) a Firebird database alias; (ii) the full path of a database file; <em>or</em> (iii) a full Firebird connection string. <em>Do not specify <tt>:host</tt>, <tt>:service</tt> or <tt>:port</tt> as separate options when using a full connection string.</em>"
  - !ruby/struct:SM::Flow::LI 
    label: "<tt>:host</tt>:"
    body: Set to <tt>&quot;remote.host.name&quot;</tt> for remote database connections. May be omitted for local connections if a full database path is specified for <tt>:database</tt>. Some platforms require a value of <tt>&quot;localhost&quot;</tt> for local connections when using a Firebird database <em>alias</em>.
  - !ruby/struct:SM::Flow::LI 
    label: "<tt>:service</tt>:"
    body: Specifies a service name for the connection. Only used if <tt>:host</tt> is provided. Required when connecting to a non-standard service.
  - !ruby/struct:SM::Flow::LI 
    label: "<tt>:port</tt>:"
    body: Specifies the connection port. Only used if <tt>:host</tt> is provided and <tt>:service</tt> is not. Required when connecting to a non-standard port and <tt>:service</tt> is not defined.
  - !ruby/struct:SM::Flow::LI 
    label: "<tt>:username</tt>:"
    body: Specifies the database user. May be omitted or set to <tt>nil</tt> (together with <tt>:password</tt>) to use the underlying operating system user credentials on supported platforms.
  - !ruby/struct:SM::Flow::LI 
    label: "<tt>:password</tt>:"
    body: Specifies the database password. Must be provided if <tt>:username</tt> is explicitly specified; should be omitted if OS user credentials are are being used.
  - !ruby/struct:SM::Flow::LI 
    label: "<tt>:charset</tt>:"
    body: Specifies the character set to be used by the connection. Refer to Firebird documentation for valid options.
  type: :NOTE
constants: 
- !ruby/object:RI::Constant 
  comment: 
  name: TEMP_COLUMN_NAME
  value: "'AR$TEMP_COLUMN'"
full_name: ActiveRecord::ConnectionAdapters::FirebirdAdapter
includes: []

instance_methods: 
- !ruby/object:RI::MethodSummary 
  name: next_sequence_value
- !ruby/object:RI::MethodSummary 
  name: prefetch_primary_key?
name: FirebirdAdapter
superclass: AbstractAdapter
