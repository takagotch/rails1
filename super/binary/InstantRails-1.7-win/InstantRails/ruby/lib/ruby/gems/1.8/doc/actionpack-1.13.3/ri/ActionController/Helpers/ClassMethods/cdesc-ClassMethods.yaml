--- !ruby/object:RI::ClassDescription 
attributes: []

class_methods: []

comment: 
- !ruby/struct:SM::Flow::P 
  body: The template helpers serve to relieve the templates from including the same inline code again and again. It's a set of standardized methods for working with forms (FormHelper), dates (DateHelper), texts (TextHelper), and Active Records (ActiveRecordHelper) that's available to all templates by default.
- !ruby/struct:SM::Flow::P 
  body: It's also really easy to make your own helpers and it's much encouraged to keep the template files free from complicated logic. It's even encouraged to bundle common compositions of methods from other helpers (often the common helpers) as they're used by the specific application.
- !ruby/struct:SM::Flow::VERB 
  body: "  module MyHelper\n    def hello_world() &quot;hello world&quot; end\n  end\n"
- !ruby/struct:SM::Flow::P 
  body: "MyHelper can now be included in a controller, like this:"
- !ruby/struct:SM::Flow::VERB 
  body: "  class MyController &lt; ActionController::Base\n    helper :my_helper\n  end\n"
- !ruby/struct:SM::Flow::P 
  body: "...and, same as above, used in any template rendered from MyController, like this:"
- !ruby/struct:SM::Flow::P 
  body: "Let's hear what the helper has to say: <tt>&lt;%= hello_world %&gt;</tt>"
constants: []

full_name: ActionController::Helpers::ClassMethods
includes: []

instance_methods: 
- !ruby/object:RI::MethodSummary 
  name: helper
- !ruby/object:RI::MethodSummary 
  name: helper_attr
- !ruby/object:RI::MethodSummary 
  name: helper_method
name: ClassMethods
superclass: 
