--- !ruby/object:RI::ClassDescription 
attributes: []

class_methods: []

comment: 
- !ruby/struct:SM::Flow::P 
  body: Capture lets you extract parts of code which can be used in other points of the template or even layout file.
- !ruby/struct:SM::Flow::H 
  level: 2
  text: Capturing a block into an instance variable
- !ruby/struct:SM::Flow::VERB 
  body: "  &lt;% @script = capture do %&gt;\n    [some html...]\n  &lt;% end %&gt;\n"
- !ruby/struct:SM::Flow::H 
  level: 2
  text: Add javascript to header using content_for
- !ruby/struct:SM::Flow::P 
  body: content_for(&quot;name&quot;) is a wrapper for capture which will make the fragment available by name to a yielding layout or template.
- !ruby/struct:SM::Flow::P 
  body: "layout.rhtml:"
- !ruby/struct:SM::Flow::VERB 
  body: "  &lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xml:lang=&quot;en&quot; lang=&quot;en&quot;&gt;\n  &lt;head&gt;\n      &lt;title&gt;layout with js&lt;/title&gt;\n      &lt;script type=&quot;text/javascript&quot;&gt;\n        &lt;%= yield :script %&gt;\n    &lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;%= yield %&gt;\n  &lt;/body&gt;\n  &lt;/html&gt;\n"
- !ruby/struct:SM::Flow::P 
  body: view.rhtml
- !ruby/struct:SM::Flow::VERB 
  body: "  This page shows an alert box!\n\n  &lt;% content_for(&quot;script&quot;) do %&gt;\n    alert('hello world')\n  &lt;% end %&gt;\n\n  Normal view text\n"
constants: []

full_name: ActionView::Helpers::CaptureHelper
includes: []

instance_methods: 
- !ruby/object:RI::MethodSummary 
  name: capture
- !ruby/object:RI::MethodSummary 
  name: content_for
name: CaptureHelper
superclass: 
