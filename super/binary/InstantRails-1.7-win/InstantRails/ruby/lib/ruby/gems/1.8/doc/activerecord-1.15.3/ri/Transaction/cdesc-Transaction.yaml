--- !ruby/object:RI::ClassDescription 
attributes: []

class_methods: []

comment: 
- !ruby/struct:SM::Flow::H 
  level: 2
  text: Licence
- !ruby/struct:SM::Flow::P 
  body: "Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &quot;Software&quot;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:"
- !ruby/struct:SM::Flow::P 
  body: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
- !ruby/struct:SM::Flow::P 
  body: THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. The &quot;Transaction&quot; namespace can be used for additional transaction support objects and modules.
constants: 
- !ruby/object:RI::Constant 
  comment: 
  name: Messages
  value: "{     :bad_debug_object =>       te % \"the transaction debug object must respond to #<<.\",     :unique_names =>       te % \"named transactions must be unique.\",     :no_transaction_open =>       te % \"no transaction open.\",     :cannot_rewind_no_transaction =>       te % \"cannot rewind; there is no current transaction.\",     :cannot_rewind_named_transaction =>       te % \"cannot rewind to transaction %s because it does not exist.\",     :cannot_rewind_transaction_before_block =>       te % \"cannot rewind a transaction started before the execution block.\",     :cannot_abort_no_transaction =>       te % \"cannot abort; there is no current transaction.\",     :cannot_abort_transaction_before_block =>       te % \"cannot abort a transaction started before the execution block.\",     :cannot_abort_named_transaction =>       te % \"cannot abort nonexistant transaction %s.\",     :cannot_commit_no_transaction =>       te % \"cannot commit; there is no current transaction.\",     :cannot_commit_transaction_before_block =>       te % \"cannot commit a transaction started before the execution block.\",     :cannot_commit_named_transaction =>       te % \"cannot commit nonexistant transaction %s.\",     :cannot_start_empty_block_transaction =>       te % \"cannot start a block transaction with no objects.\",     :cannot_obtain_transaction_lock =>       te % \"cannot obtain transaction lock for #%s.\",   }"
full_name: Transaction
includes: []

instance_methods: []

name: Transaction
superclass: 
