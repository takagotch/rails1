--- !ruby/object:RI::ClassDescription 
attributes: []

class_methods: []

comment: 
- !ruby/struct:SM::Flow::P 
  body: Provides a set of helpers for calling Prototype JavaScript functions, including functionality to call remote methods using Ajax[http://www.adaptivepath.com/publications/essays/archives/000385.php]. This means that you can call actions in your controllers without reloading the page, but still update certain parts of it using injections into the DOM. The common use case is having a form that adds a new element to a list without reloading the page.
- !ruby/struct:SM::Flow::P 
  body: To be able to use these helpers, you must include the Prototype JavaScript framework in your pages. See the documentation for ActionView::Helpers::JavaScriptHelper for more information on including the necessary JavaScript.
- !ruby/struct:SM::Flow::P 
  body: See link_to_remote for documentation of options common to all Ajax helpers.
- !ruby/struct:SM::Flow::P 
  body: See also ActionView::Helpers::ScriptaculousHelper for helpers which work with the Scriptaculous controls and visual effects library.
- !ruby/struct:SM::Flow::P 
  body: See JavaScriptGenerator for information on updating multiple elements on the page in an Ajax response.
constants: 
- !ruby/object:RI::Constant 
  comment: 
  name: CALLBACKS
  value: Set.new([ :uninitialized, :loading, :loaded,                          :interactive, :complete, :failure, :success ] +                          (100..599).to_a)
- !ruby/object:RI::Constant 
  comment: 
  name: AJAX_OPTIONS
  value: Set.new([ :before, :after, :condition, :url,                          :asynchronous, :method, :insertion, :position,                          :form, :with, :update, :script ]).merge(CALLBACKS)
full_name: ActionView::Helpers::PrototypeHelper
includes: []

instance_methods: 
- !ruby/object:RI::MethodSummary 
  name: build_callbacks
- !ruby/object:RI::MethodSummary 
  name: build_observer
- !ruby/object:RI::MethodSummary 
  name: evaluate_remote_response
- !ruby/object:RI::MethodSummary 
  name: form_remote_for
- !ruby/object:RI::MethodSummary 
  name: form_remote_tag
- !ruby/object:RI::MethodSummary 
  name: link_to_remote
- !ruby/object:RI::MethodSummary 
  name: method_option_to_s
- !ruby/object:RI::MethodSummary 
  name: observe_field
- !ruby/object:RI::MethodSummary 
  name: observe_form
- !ruby/object:RI::MethodSummary 
  name: options_for_ajax
- !ruby/object:RI::MethodSummary 
  name: periodically_call_remote
- !ruby/object:RI::MethodSummary 
  name: remote_form_for
- !ruby/object:RI::MethodSummary 
  name: remote_function
- !ruby/object:RI::MethodSummary 
  name: submit_to_remote
- !ruby/object:RI::MethodSummary 
  name: update_element_function
- !ruby/object:RI::MethodSummary 
  name: update_page
- !ruby/object:RI::MethodSummary 
  name: update_page_tag
name: PrototypeHelper
superclass: 
