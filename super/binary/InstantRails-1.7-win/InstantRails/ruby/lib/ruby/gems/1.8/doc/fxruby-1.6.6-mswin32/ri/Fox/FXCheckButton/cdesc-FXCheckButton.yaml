--- !ruby/object:RI::ClassDescription 
attributes: 
- !ruby/object:RI::Attribute 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Box background color [FXColor]
  name: boxColor
  rw: RW
- !ruby/object:RI::Attribute 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Check button style [Integer]
  name: checkButtonStyle
  rw: RW
- !ruby/object:RI::Attribute 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Box check color [FXColor]
  name: checkColor
  rw: RW
- !ruby/object:RI::Attribute 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Check button state (<tt>TRUE</tt>, <tt>FALSE</tt> or <tt>MAYBE</tt>) [Integer]
  name: checkState
  rw: RW
class_methods: 
- !ruby/object:RI::MethodSummary 
  name: new
- !ruby/object:RI::MethodSummary 
  name: new
comment: 
- !ruby/struct:SM::Flow::P 
  body: A Check button is a tri-state button. Normally, it is either <tt>TRUE</tt> or <tt>FALSE</tt>, and toggles between <tt>TRUE</tt> or <tt>FALSE</tt> whenever it is pressed. A third state <tt>MAYBE</tt> may be set to indicate that no selection has been made yet by the user, or that the state is ambiguous. When pressed, the Check Button sends a <tt>SEL_COMMAND</tt> to its target, and the message data represents the state of the check button. The option <tt>CHECKBUTTON_AUTOGRAY</tt> (<tt>CHECKBUTTON_AUTOHIDE</tt>) causes the button to be grayed out (hidden) if its handler does not respond to the <tt>SEL_UPDATE</tt> message. With the <tt>CHECKBUTTON_PLUS</tt> option, the Check Button will draw a + or - sign instead of a check. You can use this to make collapsible panels, by hooking up a Check Button to a layout manager via the <tt>ID_TOGGLE_SHOWN</tt> message. This will give a similar visual element as collapsing folders in a Tree List.
- !ruby/struct:SM::Flow::H 
  level: 3
  text: Events
- !ruby/struct:SM::Flow::P 
  body: "The following messages are sent by FXCheckButton to its target:"
- !ruby/object:SM::Flow::LIST 
  contents: 
  - !ruby/struct:SM::Flow::LI 
    label: "+SEL_KEYPRESS+:"
    body: sent when a key goes down; the message data is an FXEvent instance.
  - !ruby/struct:SM::Flow::LI 
    label: "+SEL_KEYRELEASE+:"
    body: sent when a key goes up; the message data is an FXEvent instance.
  - !ruby/struct:SM::Flow::LI 
    label: "+SEL_LEFTBUTTONPRESS+:"
    body: sent when the left mouse button goes down; the message data is an FXEvent instance.
  - !ruby/struct:SM::Flow::LI 
    label: "+SEL_LEFTBUTTONRELEASE+:"
    body: sent when the left mouse button goes up; the message data is an FXEvent instance.
  - !ruby/struct:SM::Flow::LI 
    label: "+SEL_COMMAND+:"
    body: sent when the button is clicked.
  type: :NOTE
- !ruby/struct:SM::Flow::H 
  level: 3
  text: CheckButton styles
- !ruby/object:SM::Flow::LIST 
  contents: 
  - !ruby/struct:SM::Flow::LI 
    label: "+CHECKBUTTON_AUTOGRAY+:"
    body: Automatically gray out when not updated
  - !ruby/struct:SM::Flow::LI 
    label: "+CHECKBUTTON_AUTOHIDE+:"
    body: Automatically hide when not updated
  - !ruby/struct:SM::Flow::LI 
    label: "+CHECKBUTTON_PLUS+:"
    body: Draw a plus sign for unchecked and minus sign for checked
  - !ruby/struct:SM::Flow::LI 
    label: "+CHECKBUTTON_NORMAL+:"
    body: <tt>JUSTIFY_NORMAL|ICON_BEFORE_TEXT</tt>
  type: :NOTE
constants: []

full_name: Fox::FXCheckButton
includes: []

instance_methods: 
- !ruby/object:RI::MethodSummary 
  name: checked?
- !ruby/object:RI::MethodSummary 
  name: maybe?
- !ruby/object:RI::MethodSummary 
  name: setCheck
- !ruby/object:RI::MethodSummary 
  name: unchecked?
name: FXCheckButton
superclass: Object
