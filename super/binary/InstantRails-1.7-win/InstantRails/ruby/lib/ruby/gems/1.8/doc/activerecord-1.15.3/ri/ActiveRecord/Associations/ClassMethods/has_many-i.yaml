--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Adds the following methods for retrieval and query of collections of associated objects. <tt>collection</tt> is replaced with the symbol passed as the first argument, so <tt>has_many :clients</tt> would add among others <tt>clients.empty?</tt>.
- !ruby/object:SM::Flow::LIST 
  contents: 
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt>collection(force_reload = false)</tt> - returns an array of all the associated objects. An empty array is returned if none are found.
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt>collection&lt;&lt;(object, ...)</tt> - adds one or more objects to the collection by setting their foreign keys to the collection's primary key.
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt>collection.delete(object, ...)</tt> - removes one or more objects from the collection by setting their foreign keys to NULL. This will also destroy the objects if they're declared as belongs_to and dependent on this model.
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt>collection=objects</tt> - replaces the collections content by deleting and adding objects as appropriate.
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt>collection_singular_ids</tt> - returns an array of the associated objects ids
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt>collection_singular_ids=ids</tt> - replace the collection by the objects identified by the primary keys in <tt>ids</tt>
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt>collection.clear</tt> - removes every object from the collection. This destroys the associated objects if they are <tt>:dependent</tt>, deletes them directly from the database if they are <tt>:dependent =&gt; :delete_all</tt>, and sets their foreign keys to NULL otherwise.
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt>collection.empty?</tt> - returns true if there are no associated objects.
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt>collection.size</tt> - returns the number of associated objects.
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt>collection.find</tt> - finds an associated object according to the same rules as Base.find.
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt>collection.build(attributes = {})</tt> - returns a new object of the collection type that has been instantiated with <tt>attributes</tt> and linked to this object through a foreign key but has not yet been saved. *Note:* This only works if an associated object already exists, not if it's nil!
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt>collection.create(attributes = {})</tt> - returns a new object of the collection type that has been instantiated with <tt>attributes</tt> and linked to this object through a foreign key and that has already been saved (if it passed the validation). *Note:* This only works if an associated object already exists, not if it's nil!
  type: :BULLET
- !ruby/struct:SM::Flow::P 
  body: "Example: A Firm class declares <tt>has_many :clients</tt>, which will add:"
- !ruby/object:SM::Flow::LIST 
  contents: 
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt>Firm#clients</tt> (similar to <tt>Clients.find :all, :conditions =&gt; &quot;firm_id = #{id}&quot;</tt>)"
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt>Firm#clients&lt;&lt;</tt>
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt>Firm#clients.delete</tt>
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt>Firm#clients=</tt>
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt>Firm#client_ids</tt>
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt>Firm#client_ids=</tt>
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt>Firm#clients.clear</tt>
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt>Firm#clients.empty?</tt> (similar to <tt>firm.clients.size == 0</tt>)
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt>Firm#clients.size</tt> (similar to <tt>Client.count &quot;firm_id = #{id}&quot;</tt>)"
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt>Firm#clients.find</tt> (similar to <tt>Client.find(id, :conditions =&gt; &quot;firm_id = #{id}&quot;)</tt>)"
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt>Firm#clients.build</tt> (similar to <tt>Client.new(&quot;firm_id&quot; =&gt; id)</tt>)
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt>Firm#clients.create</tt> (similar to <tt>c = Client.new(&quot;firm_id&quot; =&gt; id); c.save; c</tt>)
  type: :BULLET
- !ruby/struct:SM::Flow::P 
  body: The declaration can also include an options hash to specialize the behavior of the association.
- !ruby/struct:SM::Flow::P 
  body: "Options are:"
- !ruby/object:SM::Flow::LIST 
  contents: 
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt>:class_name</tt> - specify the class name of the association. Use it only if that name can't be inferred from the association name. So <tt>has_many :products</tt> will by default be linked to the <tt>Product</tt> class, but if the real class name is <tt>SpecialProduct</tt>, you'll have to specify it with this option.
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt>:conditions</tt> - specify the conditions that the associated objects must meet in order to be included as a &quot;WHERE&quot; sql fragment, such as &quot;price &gt; 5 AND name LIKE 'B%'&quot;.
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt>:order</tt> - specify the order in which the associated objects are returned as a &quot;ORDER BY&quot; sql fragment, such as &quot;last_name, first_name DESC&quot;
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt>:group</tt> - specify the attribute by which the associated objects are returned as a &quot;GROUP BY&quot; sql fragment, such as &quot;category&quot;
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt>:foreign_key</tt> - specify the foreign key used for the association. By default this is guessed to be the name of this class in lower-case and &quot;_id&quot; suffixed. So a <tt>Person</tt> class that makes a has_many association will use &quot;person_id&quot; as the default foreign_key.
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt>:dependent</tt> - if set to :destroy all the associated objects are destroyed alongside this object by calling their destroy method. If set to :delete_all all associated objects are deleted <b>without</b> calling their destroy method. If set to :nullify all associated objects' foreign keys are set to NULL <b>without</b> calling their save callbacks. NOTE: :dependent =&gt; true is deprecated and has been replaced with :dependent =&gt; :destroy. May not be set if :exclusively_dependent is also set."
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt>:exclusively_dependent</tt> - Deprecated; equivalent to :dependent =&gt; :delete_all. If set to true all the associated object are deleted in one SQL statement without having their before_destroy callback run. This should only be used on associations that depend solely on this class and don't need to do any clean-up in before_destroy. The upside is that it's much faster, especially if there's a counter_cache involved. May not be set if :dependent is also set.
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt>:finder_sql</tt> - specify a complete SQL statement to fetch the association. This is a good way to go for complex associations that depend on multiple tables. Note: When this option is used, <tt>find_in_collection</tt> is <em>not</em> added."
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt>:counter_sql</tt> - specify a complete SQL statement to fetch the size of the association. If +:finder_sql+ is specified but +:counter_sql+, +:counter_sql+ will be generated by replacing SELECT ... FROM with SELECT COUNT(*) FROM.
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt>:extend</tt> - specify a named module for extending the proxy, see &quot;Association extensions&quot;.
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt>:include</tt> - specify second-order associations that should be eager loaded when the collection is loaded.
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt>:group</tt>: An attribute name by which the result should be grouped. Uses the GROUP BY SQL-clause."
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt>:limit</tt>: An integer determining the limit on the number of rows that should be returned."
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt>:offset</tt>: An integer determining the offset from where the rows should be fetched. So at 5, it would skip the first 4 rows."
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt>:select</tt>: By default, this is * as in SELECT * FROM, but can be changed if you for example want to do a join, but not include the joined columns."
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt>:as</tt>: Specifies a polymorphic interface (See #belongs_to)."
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt>:through</tt>: Specifies a Join Model to perform the query through. Options for <tt>:class_name</tt> and <tt>:foreign_key</tt> are ignored, as the association uses the source reflection. You can only use a <tt>:through</tt> query through a <tt>belongs_to</tt> or <tt>has_many</tt> association."
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt>:source</tt>: Specifies the source association name used by <tt>has_many :through</tt> queries. Only use it if the name cannot be inferred from the association. <tt>has_many :subscribers, :through =&gt; :subscriptions</tt> will look for either +:subscribers+ or +:subscriber+ on <tt>Subscription</tt>, unless a +:source+ is given."
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt>:source_type</tt>: Specifies type of the source association used by <tt>has_many :through</tt> queries where the source association is a polymorphic belongs_to."
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt>:uniq</tt> - if set to true, duplicates will be omitted from the collection. Useful in conjunction with :through.
  type: :BULLET
- !ruby/struct:SM::Flow::P 
  body: "Option examples:"
- !ruby/struct:SM::Flow::VERB 
  body: "  has_many :comments, :order =&gt; &quot;posted_on&quot;\n  has_many :comments, :include =&gt; :author\n  has_many :people, :class_name =&gt; &quot;Person&quot;, :conditions =&gt; &quot;deleted = 0&quot;, :order =&gt; &quot;name&quot;\n  has_many :tracks, :order =&gt; &quot;position&quot;, :dependent =&gt; :destroy\n  has_many :comments, :dependent =&gt; :nullify\n  has_many :tags, :as =&gt; :taggable\n  has_many :subscribers, :through =&gt; :subscriptions, :source =&gt; :user\n  has_many :subscribers, :class_name =&gt; &quot;Person&quot;, :finder_sql =&gt;\n      'SELECT DISTINCT people.* ' +\n      'FROM people p, post_subscriptions ps ' +\n      'WHERE ps.post_id = #{id} AND ps.person_id = p.id ' +\n      'ORDER BY p.first_name'\n"
full_name: ActiveRecord::Associations::ClassMethods#has_many
is_singleton: false
name: has_many
params: (association_id, options = {}, &extension)
visibility: public
