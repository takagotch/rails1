--- !ruby/object:RI::ClassDescription 
attributes: []

class_methods: 
- !ruby/object:RI::MethodSummary 
  name: included
comment: 
- !ruby/struct:SM::Flow::P 
  body: "The flash provides a way to pass temporary objects between actions. Anything you place in the flash will be exposed to the very next action and then cleared out. This is a great way of doing notices and alerts, such as a create action that sets <tt>flash[:notice] = &quot;Successfully created&quot;</tt> before redirecting to a display action that can then expose the flash to its template. Actually, that exposure is automatically done. Example:"
- !ruby/struct:SM::Flow::VERB 
  body: "  class WeblogController &lt; ActionController::Base\n    def create\n      # save post\n      flash[:notice] = &quot;Successfully created post&quot;\n      redirect_to :action =&gt; &quot;display&quot;, :params =&gt; { :id =&gt; post.id }\n    end\n\n    def display\n      # doesn't need to assign the flash notice to the template, that's done automatically\n    end\n  end\n\n  display.rhtml\n    &lt;% if flash[:notice] %&gt;&lt;div class=&quot;notice&quot;&gt;&lt;%= flash[:notice] %&gt;&lt;/div&gt;&lt;% end %&gt;\n"
- !ruby/struct:SM::Flow::P 
  body: "This example just places a string in the flash, but you can put any object in there. And of course, you can put as many as you like at a time too. Just remember: They'll be gone by the time the next action has been performed."
- !ruby/struct:SM::Flow::P 
  body: See docs on the FlashHash class for more details about the flash.
constants: []

full_name: ActionController::Flash
includes: []

instance_methods: []

name: Flash
superclass: 
