--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Register a signal processing message to be sent to target object when the specified signal is raised.
- !ruby/struct:SM::Flow::P 
  body: "There are several forms for #addSignal; the original form (from FOX) takes (up to) five arguments:"
- !ruby/struct:SM::Flow::VERB 
  body: "  anApp.addSignal(aSignal, anObject, aMessageId, sendImmediately=false, flags=0)\n"
- !ruby/struct:SM::Flow::P 
  body: Here, <em>aSignal</em> is a string indicating the operating system signal of interest (such as &quot;SIGINT&quot;). The second and third arguments are the target object and message identifier for the message to be sent when this signal is raised. If <em>sendImmediately</em> is <tt>true</tt>, the message will be sent to the target right away; this should be used with extreme care as the application is interrupted at an unknown point it its execution. The <em>flags</em> are to be set as per POSIX definitions.
- !ruby/struct:SM::Flow::P 
  body: "A second form of #addSignal takes a Method instance as its second argument:"
- !ruby/struct:SM::Flow::VERB 
  body: "  anApp.addSignal(aSignal, aMethod, sendImmediately=false, flags=0)\n"
- !ruby/struct:SM::Flow::P 
  body: For this form, the method should have the standard argument list for a FOX message handler. That is, the method should take three arguments, for the message <em>sender</em> (an FXObject), the message <em>selector</em>, and the message <em>data</em> (if any).
- !ruby/struct:SM::Flow::P 
  body: "The last form of #addSignal takes a block:"
- !ruby/struct:SM::Flow::VERB 
  body: "  anApp.addSignal(aSignal, sendImmediately=false, flags=0) { |sender, sel, data|\n    ... handle the signal ...\n  }\n"
full_name: Fox::FXApp#addSignal
is_singleton: false
name: addSignal
params: (sig, *args, &block)
visibility: public
