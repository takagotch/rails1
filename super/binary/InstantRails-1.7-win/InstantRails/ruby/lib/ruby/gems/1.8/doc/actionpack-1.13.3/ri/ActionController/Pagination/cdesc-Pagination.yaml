--- !ruby/object:RI::ClassDescription 
attributes: []

class_methods: []

comment: 
- !ruby/struct:SM::Flow::H 
  level: 3
  text: Action Pack pagination for Active Record collections
- !ruby/struct:SM::Flow::P 
  body: "DEPRECATION WARNING: Pagination will be separated into its own plugin with Rails 2.0."
- !ruby/struct:SM::Flow::P 
  body: The Pagination module aids in the process of paging large collections of Active Record objects. It offers macro-style automatic fetching of your model for multiple views, or explicit fetching for single actions. And if the magic isn't flexible enough for your needs, you can create your own paginators with a minimal amount of code.
- !ruby/struct:SM::Flow::P 
  body: The Pagination module can handle as much or as little as you wish. In the controller, have it automatically query your model for pagination; or, if you prefer, create Paginator objects yourself.
- !ruby/struct:SM::Flow::P 
  body: Pagination is included automatically for all controllers.
- !ruby/struct:SM::Flow::P 
  body: For help rendering pagination links, see ActionView::Helpers::PaginationHelper.
- !ruby/struct:SM::Flow::H 
  level: 4
  text: Automatic pagination for every action in a controller
- !ruby/struct:SM::Flow::VERB 
  body: "  class PersonController &lt; ApplicationController\n    model :person\n\n    paginate :people, :order =&gt; 'last_name, first_name',\n             :per_page =&gt; 20\n\n    # ...\n  end\n"
- !ruby/struct:SM::Flow::P 
  body: Each action in this controller now has access to a <tt>@people</tt> instance variable, which is an ordered collection of model objects for the current page (at most 20, sorted by last name and first name), and a <tt>@person_pages</tt> Paginator instance. The current page is determined by the <tt>params[:page]</tt> variable.
- !ruby/struct:SM::Flow::H 
  level: 4
  text: Pagination for a single action
- !ruby/struct:SM::Flow::VERB 
  body: "  def list\n    @person_pages, @people =\n      paginate :people, :order =&gt; 'last_name, first_name'\n  end\n"
- !ruby/struct:SM::Flow::P 
  body: Like the previous example, but explicitly creates <tt>@person_pages</tt> and <tt>@people</tt> for a single action, and uses the default of 10 items per page.
- !ruby/struct:SM::Flow::H 
  level: 4
  text: Custom/&quot;classic&quot; pagination
- !ruby/struct:SM::Flow::VERB 
  body: "  def list\n    @person_pages = Paginator.new self, Person.count, 10, params[:page]\n    @people = Person.find :all, :order =&gt; 'last_name, first_name',\n                          :limit  =&gt;  @person_pages.items_per_page,\n                          :offset =&gt;  @person_pages.current.offset\n  end\n"
- !ruby/struct:SM::Flow::P 
  body: Explicitly creates the paginator from the previous example and uses Paginator#to_sql to retrieve <tt>@people</tt> from the model.
constants: 
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: A hash holding options for controllers using macro-style pagination
  name: OPTIONS
  value: Hash.new
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: The default options for pagination
  name: DEFAULT_OPTIONS
  value: "{         :class_name => nil,         :singular_name => nil,         :per_page   => 10,         :conditions => nil,         :order_by   => nil,         :order      => nil,         :join       => nil,         :joins      => nil,         :count      => nil,         :include    => nil,         :select     => nil,         :parameter  => 'page'"
full_name: ActionController::Pagination
includes: []

instance_methods: 
- !ruby/object:RI::MethodSummary 
  name: count_collection_for_pagination
- !ruby/object:RI::MethodSummary 
  name: find_collection_for_pagination
- !ruby/object:RI::MethodSummary 
  name: paginate
name: Pagination
superclass: 
