--- !ruby/object:RI::ClassDescription 
attributes: 
- !ruby/object:RI::Attribute 
  comment: 
  name: loaded_specs
  rw: R
- !ruby/object:RI::Attribute 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Set the value of the ssl_avilable flag.
  name: ssl_available
  rw: W
class_methods: 
- !ruby/object:RI::MethodSummary 
  name: activate
- !ruby/object:RI::MethodSummary 
  name: all_load_paths
- !ruby/object:RI::MethodSummary 
  name: bindir
- !ruby/object:RI::MethodSummary 
  name: clear_paths
- !ruby/object:RI::MethodSummary 
  name: config_file
- !ruby/object:RI::MethodSummary 
  name: configuration
- !ruby/object:RI::MethodSummary 
  name: configuration=
- !ruby/object:RI::MethodSummary 
  name: configure
- !ruby/object:RI::MethodSummary 
  name: datadir
- !ruby/object:RI::MethodSummary 
  name: default_dir
- !ruby/object:RI::MethodSummary 
  name: dir
- !ruby/object:RI::MethodSummary 
  name: ensure_ssl_available
- !ruby/object:RI::MethodSummary 
  name: latest_load_paths
- !ruby/object:RI::MethodSummary 
  name: manage_gems
- !ruby/object:RI::MethodSummary 
  name: path
- !ruby/object:RI::MethodSummary 
  name: required_location
- !ruby/object:RI::MethodSummary 
  name: ruby
- !ruby/object:RI::MethodSummary 
  name: searcher
- !ruby/object:RI::MethodSummary 
  name: source_index
- !ruby/object:RI::MethodSummary 
  name: ssl_available?
- !ruby/object:RI::MethodSummary 
  name: suffix_pattern
- !ruby/object:RI::MethodSummary 
  name: suffixes
- !ruby/object:RI::MethodSummary 
  name: use_paths
- !ruby/object:RI::MethodSummary 
  name: user_home
comment: 
- !ruby/struct:SM::Flow::P 
  body: Main module to hold all RubyGem classes/modules.
constants: 
- !ruby/object:RI::Constant 
  comment: 
  name: HELP
  value: "%{     RubyGems is a sophisticated package manager for Ruby.  This is a     basic help message containing pointers to more information.        Usage:         gem -h/--help         gem -v/--version         gem command [arguments...] [options...]        Examples:         gem install rake         gem list --local         gem build package.gemspec         gem help install        Further help:         gem help commands            list all 'gem' commands         gem help examples            show some examples of usage         gem help <COMMAND>           show help on COMMAND                                        (e.g. 'gem help install')       Further information:         http://rubygems.rubyforge.org     }.gsub(/^    /, \"\")"
- !ruby/object:RI::Constant 
  comment: 
  name: EXAMPLES
  value: "%{     Some examples of 'gem' usage.      * Install 'rake', either from local directory or remote server:              gem install rake      * Install 'rake', only from remote server:          gem install rake --remote      * Install 'rake' from remote server, and run unit tests,       and generate RDocs:          gem install --remote rake --test --rdoc --ri      * Install 'rake', but only version 0.3.1, even if dependencies       are not met, and into a specific directory:          gem install rake --version 0.3.1 --force --install-dir $HOME/.gems      * List local gems whose name begins with 'D':          gem list D      * List local and remote gems whose name contains 'log':          gem search log --both      * List only remote gems whose name contains 'log':          gem search log --remote      * Uninstall 'rake':          gem uninstall rake          * Create a gem:          See http://rubygems.rubyforge.org/wiki/wiki.pl?CreateAGemInTenMinutes      * See information about RubyGems:              gem environment      }.gsub(/^    /, \"\")"
- !ruby/object:RI::Constant 
  comment: 
  name: RubyGemsVersion
  value: "'0.9.2'"
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Cache is an alias for SourceIndex to allow older YAMLized source index objects to load properly.
  name: Cache
  value: SourceIndex
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Class Requirement's original definition is nested in Version. Although an probably inappropriate place, current gems specs reference the nested class name explicitly. To remain compatible with old software loading gemspecs, we leave the original definition in Version, but define an alias Gem::Requirement for use everywhere else.
  name: Requirement
  value: "::Gem::Version::Requirement"
- !ruby/object:RI::Constant 
  comment: 
  name: MUTEX
  value: Mutex.new
- !ruby/object:RI::Constant 
  comment: 
  name: RubyGemsPackageVersion
  value: RubyGemsVersion
- !ruby/object:RI::Constant 
  comment: 
  name: DIRECTORIES
  value: "['cache', 'doc', 'gems', 'specifications']"
full_name: Gem
includes: []

instance_methods: []

name: Gem
superclass: 
