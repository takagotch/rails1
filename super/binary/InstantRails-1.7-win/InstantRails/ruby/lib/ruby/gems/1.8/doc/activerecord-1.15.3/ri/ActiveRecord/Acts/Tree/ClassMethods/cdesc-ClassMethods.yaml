--- !ruby/object:RI::ClassDescription 
attributes: []

class_methods: []

comment: 
- !ruby/struct:SM::Flow::P 
  body: Specify this act if you want to model a tree structure by providing a parent association and a children association. This act requires that you have a foreign key column, which by default is called parent_id.
- !ruby/struct:SM::Flow::VERB 
  body: "  class Category &lt; ActiveRecord::Base\n    acts_as_tree :order =&gt; &quot;name&quot;\n  end\n\n  Example:\n  root\n   _ child1\n        _ subchild1\n        _ subchild2\n\n  root      = Category.create(&quot;name&quot; =&gt; &quot;root&quot;)\n  child1    = root.children.create(&quot;name&quot; =&gt; &quot;child1&quot;)\n  subchild1 = child1.children.create(&quot;name&quot; =&gt; &quot;subchild1&quot;)\n\n  root.parent   # =&gt; nil\n  child1.parent # =&gt; root\n  root.children # =&gt; [child1]\n  root.children.first.children.first # =&gt; subchild1\n"
- !ruby/struct:SM::Flow::P 
  body: "In addition to the parent and children associations, the following instance methods are added to the class after specifying the act:"
- !ruby/object:SM::Flow::LIST 
  contents: 
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "siblings : Returns all the children of the parent, excluding the current node ([ subchild2 ] when called from subchild1)"
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "self_and_siblings : Returns all the children of the parent, including the current node ([ subchild1, subchild2 ] when called from subchild1)"
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "ancestors : Returns all the ancestors of the current node ([child1, root] when called from subchild2)"
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "root : Returns the root of the current node (root when called from subchild2)"
  type: :BULLET
constants: []

full_name: ActiveRecord::Acts::Tree::ClassMethods
includes: []

instance_methods: 
- !ruby/object:RI::MethodSummary 
  name: acts_as_tree
name: ClassMethods
superclass: 
