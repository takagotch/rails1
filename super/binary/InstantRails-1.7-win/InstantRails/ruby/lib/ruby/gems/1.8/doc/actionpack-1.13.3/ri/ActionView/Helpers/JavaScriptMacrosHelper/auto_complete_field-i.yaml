--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: "DEPRECATION WARNING: This method will become a separate plugin when Rails 2.0 ships."
- !ruby/struct:SM::Flow::P 
  body: Adds AJAX autocomplete functionality to the text input field with the DOM ID specified by <tt>field_id</tt>.
- !ruby/struct:SM::Flow::P 
  body: This function expects that the called action returns an HTML &lt;ul&gt; list, or nothing if no entries should be displayed for autocompletion.
- !ruby/struct:SM::Flow::P 
  body: You'll probably want to turn the browser's built-in autocompletion off, so be sure to include an <tt>autocomplete=&quot;off&quot;</tt> attribute with your text input field.
- !ruby/struct:SM::Flow::P 
  body: The autocompleter object is assigned to a Javascript variable named <tt>field_id</tt>_auto_completer. This object is useful if you for example want to trigger the auto-complete suggestions through other means than user input (for that specific case, call the <tt>activate</tt> method on that object).
- !ruby/struct:SM::Flow::P 
  body: "Required <tt>options</tt> are:"
- !ruby/object:SM::Flow::LIST 
  contents: 
  - !ruby/struct:SM::Flow::LI 
    label: "<tt>:url</tt>:"
    body: URL to call for autocompletion results in url_for format.
  type: :NOTE
- !ruby/struct:SM::Flow::P 
  body: "Addtional <tt>options</tt> are:"
- !ruby/object:SM::Flow::LIST 
  contents: 
  - !ruby/struct:SM::Flow::LI 
    label: "<tt>:update</tt>:"
    body: Specifies the DOM ID of the element whose innerHTML should be updated with the autocomplete entries returned by the AJAX request. Defaults to <tt>field_id</tt> + '_auto_complete'
  - !ruby/struct:SM::Flow::LI 
    label: "<tt>:with</tt>:"
    body: A JavaScript expression specifying the parameters for the XMLHttpRequest. This defaults to 'fieldname=value'.
  - !ruby/struct:SM::Flow::LI 
    label: "<tt>:frequency</tt>:"
    body: Determines the time to wait after the last keystroke for the AJAX request to be initiated.
  - !ruby/struct:SM::Flow::LI 
    label: "<tt>:indicator</tt>:"
    body: Specifies the DOM ID of an element which will be displayed while autocomplete is running.
  - !ruby/struct:SM::Flow::LI 
    label: "<tt>:tokens</tt>:"
    body: "A string or an array of strings containing separator tokens for tokenized incremental autocompletion. Example: <tt>:tokens =&gt; ','</tt> would allow multiple autocompletion entries, separated by commas."
  - !ruby/struct:SM::Flow::LI 
    label: "<tt>:min_chars</tt>:"
    body: The minimum number of characters that should be in the input field before an Ajax call is made to the server.
  - !ruby/struct:SM::Flow::LI 
    label: "<tt>:on_hide</tt>:"
    body: "A Javascript expression that is called when the autocompletion div is hidden. The expression should take two variables: element and update. Element is a DOM element for the field, update is a DOM element for the div from which the innerHTML is replaced."
  - !ruby/struct:SM::Flow::LI 
    label: "<tt>:on_show</tt>:"
    body: Like on_hide, only now the expression is called then the div is shown.
  - !ruby/struct:SM::Flow::LI 
    label: "<tt>:after_update_element</tt>:"
    body: "A Javascript expression that is called when the user has selected one of the proposed values. The expression should take two variables: element and value. Element is a DOM element for the field, value is the value selected by the user."
  - !ruby/struct:SM::Flow::LI 
    label: "<tt>:select</tt>:"
    body: Pick the class of the element from which the value for insertion should be extracted. If this is not specified, the entire element is used.
  type: :NOTE
full_name: ActionView::Helpers::JavaScriptMacrosHelper#auto_complete_field
is_singleton: false
name: auto_complete_field
params: (field_id, options = {})
visibility: public
